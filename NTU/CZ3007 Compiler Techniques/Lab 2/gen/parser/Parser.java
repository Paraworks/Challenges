package parser;

import beaver.*;
import java.util.ArrayList;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "parser.beaver".
 */
public class Parser extends beaver.Parser {
	static public class Terminals {
		static public final short EOF = 0;
		static public final short ID = 1;
		static public final short LBRACKET = 2;
		static public final short LPAREN = 3;
		static public final short MINUS = 4;
		static public final short STRING_LITERAL = 5;
		static public final short INT_LITERAL = 6;
		static public final short TRUE = 7;
		static public final short FALSE = 8;
		static public final short RPAREN = 9;
		static public final short VOID = 10;
		static public final short BOOLEAN = 11;
		static public final short INT = 12;
		static public final short LCURLY = 13;
		static public final short SEMICOLON = 14;
		static public final short RCURLY = 15;
		static public final short RBRACKET = 16;
		static public final short IF = 17;
		static public final short WHILE = 18;
		static public final short BREAK = 19;
		static public final short RETURN = 20;
		static public final short COMMA = 21;
		static public final short EQL = 22;
		static public final short PLUS = 23;
		static public final short TIMES = 24;
		static public final short DIV = 25;
		static public final short MOD = 26;
		static public final short TYPE = 27;
		static public final short MODULE = 28;
		static public final short ELSE = 29;
		static public final short IMPORT = 30;
		static public final short PUBLIC = 31;
		static public final short EQEQ = 32;
		static public final short NEQ = 33;
		static public final short LT = 34;
		static public final short LEQ = 35;
		static public final short GT = 36;
		static public final short GEQ = 37;
	}

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9pDLbbm55KKFTsT0IB9C8HiX90WX9c4R8P0c2448I4iYWegA2eg8kxWWk8I5r1S#F73Jt#" +
		"iiieViKf4GKGKnHqN51KtKDnG4OX4LDouddxpfkbqTvn1gYWdTVgkxxpxNbxVru3PWZgSYj" +
		"au4MVWJCp1EPY1nRWUDw04CwKB9Yv36ORXQfo2qMZ7HCp2DCGHHID6eGYLg4O11cCu1dYPv" +
		"767oI9JLiPCXRwQGWxJFT8baZ7J81zJs67ALNdfcOOg9YzFNef7zg8UvsN0SrKWJxvJpqau" +
		"6TCpu5caUBh7prNn8Dy5QFFyLrRZDFJ7N4$sa026XW3Vc0ppfWJuJW$mdHNWkoB0TutoUTR" +
		"2d5OdPonEyCMJUpfFViPrlfZNlj3dkGZpSJ4Mu19ScdRqiRPlLcVXyFh7uJOK8mSHTA0Nxa" +
		"PlzC4IPECuzDKdh0FZdUo1M2xVElvIt849JgoVzgiPf1DLiWyrk1tDk0dpC8bdlG89bCkJF" +
		"FctoYuSZn68eOdn5amcPd8dQt4ZpiP8JCNvk1nNuXPSYwLOXeNy7zs5Et4lWFjWiBjOx0iX" +
		"LcpN6r7Lvl3DB60LfJobUUmg#JpzCTPInNcgMKajtw5wyZIGtpuJepctbscAmsIGAVSecCO" +
		"xJ6Lamb4m6GvJCYzJ9YzFhcjjTkI$ylHpU8fv7aeovWcA1$d6#cRCfY#RPoHJXl#JpxkMxZ" +
		"aHNpovfrdSvN30IUXk5$ayG$XM3UKzKC5EdsxqiRQJPy6z$WHpcjc13FQd2LpnHFQIDdQAT" +
		"dt235Ts6EMwA#MeTtEGAsPfVt86UruROTuv2SvlLn5cVx4utlPdyoz2Jo7ZSTfnTeqYUWgK" +
		"Fy9dCjFU$qBUcNPk20Q$7i9yZrSivKE4DmCu6n2pRVuIWB6TSevjkq7$Ttmi0SmGTNlSVk9" +
		"#SWZbAZs#Wh7vn3V47ksRHhthC8zPJ7inPH6DHThNrnNFrv9rclsr7Y5ADDz373zB#mTthz" +
		"7CPQn3rxkGM4vV7kK3T3n6#Q2EFUmPLq3VevHs$QifotJUx81zMCyb7zJwfe3uPeuVvlUZa" +
		"$wedc#0D#xFDsl9jPMoaWRhDmTIhjLpBA0zl8TnXOoBrXkqB2LYhfn6efmOHOpmZESPCEjI" +
		"DjUwoxM6$EG#6Ik3vyPqrpwiT77iS#NurivVFC2tJSkvwVQgXrfs$ajijwvn1n4dzXBhjDo" +
		"IYWMCEw3b8TSwEmFoDhhYVVnn8w#7kjOS#JgDKZrscPQFQ7yqpRZjHpfN3pMlWFx9t$A7$4" +
		"Jvf$mk1#KtU7xogwDzgPuxvGl7ypcnGzXxv3Db$w2UtylxVBBpo7koJJwK3TG#a2rylaEyH" +
		"hn4F2$FoGQLkLMDUbTUbHVb1TaecvIzddX2df5ryhIoryeQUKfMAVrPuXLvMTwMj#HDsInl" +
		"oEjEJPyIdoZjO$b8ziYFibjPx6xobTA#bb#Sx0EoNmufxIy#Pl0hh1U$dqm2l1SitWuc0Tu" +
		"FXeCszkX9xExjp6rYl8dnPdMVWFU0uQ31XP7aIi6#TSOnjvLwA$K4EHgf9s4G8SBKkialc1" +
		"3Hczyn5c7oTZSKwcZ7A6rKiXuRzgrVJtyBPH1g6AkX7ADHJRkQCkv2b7D4AQiKiWXBwobOl" +
		"FaCXSaAu5UIfRwUflu38$KRNm==");

	static final Action RETURN6 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 6];
		}
	};

	static final Action RETURN2 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 2];
		}
	};

	static final Action RETURN3 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 3];
		}
	};

	static final Action RETURN9 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 9];
		}
	};

	static final Action RETURN4 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 4];
		}
	};

	static final Action RETURN5 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 5];
		}
	};

	static final Action RETURN7 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 7];
		}
	};

	// turn off automated error recovery
	@Override
	protected void recoverFromError(Symbol token, TokenStream in) throws java.io.IOException, Exception {
		super.recoverFromError(new Symbol(0), in);
	}

	private final Action[] actions;

	public Parser() {
		super(PARSING_TABLES);
		actions = new Action[] {
			RETURN6,	// [0] Module = MODULE ID LCURLY Imports Declarations RCURLY; returns 'RCURLY' although none is marked
			RETURN2,	// [1] Imports = Imports Import; returns 'Import' although none is marked
			Action.NONE,  	// [2] Imports = 
			RETURN3,	// [3] Import = IMPORT ID SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN2,	// [4] Declarations = Declarations Declaration; returns 'Declaration' although none is marked
			Action.NONE,  	// [5] Declarations = 
			Action.RETURN,	// [6] Declaration = FunctionDeclaration
			Action.RETURN,	// [7] Declaration = FieldDeclaration
			Action.RETURN,	// [8] Declaration = TypeDeclaration
			RETURN9,	// [9] FunctionDeclaration = Accessibility TypeName ID LPAREN ParameterList RPAREN LCURLY StatementList RCURLY; returns 'RCURLY' although none is marked
			RETURN4,	// [10] FieldDeclaration = Accessibility TypeName ID SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN6,	// [11] TypeDeclaration = Accessibility TYPE ID EQL STRING_LITERAL SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN2,	// [12] StatementList = Statement StatementList; returns 'StatementList' although none is marked
			Action.NONE,  	// [13] StatementList = 
			Action.RETURN,	// [14] Accessibility = PUBLIC
			Action.NONE,  	// [15] Accessibility = 
			Action.RETURN,	// [16] TypeName = PrimitiveType
			Action.RETURN,	// [17] TypeName = ArrayType
			Action.RETURN,	// [18] TypeName = ID
			Action.RETURN,	// [19] PrimitiveType = VOID
			Action.RETURN,	// [20] PrimitiveType = BOOLEAN
			Action.RETURN,	// [21] PrimitiveType = INT
			RETURN3,	// [22] ArrayType = PrimitiveType LBRACKET RBRACKET; returns 'RBRACKET' although none is marked
			RETURN3,	// [23] ArrayType = ArrayType LBRACKET RBRACKET; returns 'RBRACKET' although none is marked
			RETURN3,	// [24] ArrayType = ID LBRACKET RBRACKET; returns 'RBRACKET' although none is marked
			Action.RETURN,	// [25] ParameterList = ParameterNonEmptyList
			Action.NONE,  	// [26] ParameterList = 
			new Action() {	// [27] ParameterNonEmptyList = ParameterNonEmptyList COMMA Parameter
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3]); return _symbols[offset + 1];
				}
			},
			new Action() {	// [28] ParameterNonEmptyList = Parameter
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
				}
			},
			RETURN2,	// [29] Parameter = TypeName ID; returns 'ID' although none is marked
			RETURN3,	// [30] Statement = TypeName ID SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN3,	// [31] Statement = LCURLY StatementList RCURLY; returns 'RCURLY' although none is marked
			Action.RETURN,	// [32] Statement = IfStatement
			RETURN5,	// [33] Statement = WHILE LPAREN Expression RPAREN Statement; returns 'Statement' although none is marked
			RETURN2,	// [34] Statement = BREAK SEMICOLON; returns 'SEMICOLON' although none is marked
			Action.RETURN,	// [35] Statement = ReturnStatement
			RETURN2,	// [36] Statement = Expression SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN5,	// [37] IfStatement = IF LPAREN Expression RPAREN Statement; returns 'Statement' although none is marked
			RETURN7,	// [38] IfStatement = IF LPAREN Expression RPAREN Statement ELSE Statement; returns 'Statement' although none is marked
			RETURN3,	// [39] ReturnStatement = RETURN Expression SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN2,	// [40] ReturnStatement = RETURN SEMICOLON; returns 'SEMICOLON' although none is marked
			Action.RETURN,	// [41] Expression = Assignment
			Action.RETURN,	// [42] Expression = RHSExpression
			RETURN3,	// [43] Assignment = LHSExpression EQL Expression; returns 'Expression' although none is marked
			Action.RETURN,	// [44] LHSExpression = ID
			Action.RETURN,	// [45] LHSExpression = ArrayAccess
			RETURN4,	// [46] ArrayAccess = ID LBRACKET Expression RBRACKET; returns 'RBRACKET' although none is marked
			RETURN4,	// [47] ArrayAccess = ArrayAccess LBRACKET Expression RBRACKET; returns 'RBRACKET' although none is marked
			Action.RETURN,	// [48] RHSExpression = ArithmeticExpression
			RETURN3,	// [49] RHSExpression = ArithmeticExpression ComparisonOperator ArithmeticExpression; returns 'ArithmeticExpression' although none is marked
			Action.RETURN,	// [50] ComparisonOperator = EQEQ
			Action.RETURN,	// [51] ComparisonOperator = NEQ
			Action.RETURN,	// [52] ComparisonOperator = LT
			Action.RETURN,	// [53] ComparisonOperator = LEQ
			Action.RETURN,	// [54] ComparisonOperator = GT
			Action.RETURN,	// [55] ComparisonOperator = GEQ
			new Action() {	// [56] ArithmeticExpression = ArithmeticExpression AdditiveOperator Term
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3]); return _symbols[offset + 1];
				}
			},
			new Action() {	// [57] ArithmeticExpression = Term
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
				}
			},
			Action.RETURN,	// [58] AdditiveOperator = PLUS
			Action.RETURN,	// [59] AdditiveOperator = MINUS
			new Action() {	// [60] Term = Term MultiplicativeOperator Factor
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3]); return _symbols[offset + 1];
				}
			},
			new Action() {	// [61] Term = Factor
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
				}
			},
			Action.RETURN,	// [62] MultiplicativeOperator = TIMES
			Action.RETURN,	// [63] MultiplicativeOperator = DIV
			Action.RETURN,	// [64] MultiplicativeOperator = MOD
			RETURN2,	// [65] Factor = MINUS Factor; returns 'Factor' although none is marked
			Action.RETURN,	// [66] Factor = PrimaryExpression
			Action.RETURN,	// [67] PrimaryExpression = LHSExpression
			RETURN4,	// [68] PrimaryExpression = ID LPAREN ExpressionEmptyList RPAREN; returns 'RPAREN' although none is marked
			RETURN3,	// [69] PrimaryExpression = LBRACKET ExpressionNonEmptyList RBRACKET; returns 'RBRACKET' although none is marked
			Action.RETURN,	// [70] PrimaryExpression = STRING_LITERAL
			Action.RETURN,	// [71] PrimaryExpression = INT_LITERAL
			Action.RETURN,	// [72] PrimaryExpression = BooleanLiterals
			RETURN3,	// [73] PrimaryExpression = LPAREN Expression RPAREN; returns 'RPAREN' although none is marked
			Action.RETURN,	// [74] BooleanLiterals = TRUE
			Action.RETURN,	// [75] BooleanLiterals = FALSE
			Action.RETURN,	// [76] ExpressionEmptyList = ExpressionNonEmptyList
			Action.NONE,  	// [77] ExpressionEmptyList = 
			new Action() {	// [78] ExpressionNonEmptyList = ExpressionNonEmptyList COMMA Expression
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3]); return _symbols[offset + 1];
				}
			},
			new Action() {	// [79] ExpressionNonEmptyList = Expression
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
				}
			}
		};
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		return actions[rule_num].reduce(_symbols, offset);
	}
}
